import express from 'express';
import crypto from 'crypto';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import db from './db.js';

const app = express();
app.use(express.json()); // Middleware to parse JSON requests

const SECRET_KEY = 'your-secret-key'; // Store your secret key in an environment variable in production

// Register route
app.post('/api/auth/register', async (req, res) => {
  const { username, password } = req.body;

  try {
    const hashedPassword = await bcrypt.hash(password, 10); // Hash the password
    const userId = crypto.randomUUID();
    const newUser = { userId, username, password: hashedPassword, online: false };

    await db.read();
    db.data.users.push(newUser); // Add user to the database
    await db.write();

    res.status(201).json({ message: 'User registered successfully' });
  } catch (error) {
    console.error("Error registering user:", error);
    res.status(500).json({ error: 'Failed to register user' });
  }
});

// Login route
app.post('/api/auth/login', async (req, res) => {
  const { username, password } = req.body;

  try {
    await db.read();
    const user = db.data.users.find(u => u.username === username);

    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }

    // Compare hashed password with the one provided
    const isPasswordValid = await bcrypt.compare(password, user.password);

    if (!isPasswordValid) {
      return res.status(401).json({ error: 'Invalid credentials' });
    }

    // Generate a JWT token
    const token = jwt.sign({ userId: user.userId, username: user.username }, SECRET_KEY, { expiresIn: '1h' });

    res.status(200).json({ token }); // Send the token to the user
  } catch (error) {
    console.error("Error logging in:", error);
    res.status(500).json({ error: 'Failed to log in' });
  }
});

// Middleware to protect routes with JWT
const authenticate = (req, res, next) => {
  const token = req.header('Authorization')?.replace('Bearer ', '');

  if (!token) {
    return res.status(403).json({ error: 'Access denied, no token provided' });
  }

  try {
    const decoded = jwt.verify(token, SECRET_KEY); // Verify the token
    req.user = decoded; // Attach the decoded data (user info) to the request object
    next();
  } catch (error) {
    res.status(401).json({ error: 'Invalid or expired token' });
  }
};

// Protected route to get user info
app.get('/api/users/me', authenticate, (req, res) => {
  const userId = req.user.userId;

  try {
    const user = db.data.users.find(u => u.userId === userId);

    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }

    res.status(200).json(user); // Respond with the user data
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch user data' });
  }
});

// Start the server
const PORT = 5000;
app.listen(PORT, '0.0.0.0', () => {
  console.log(`Server is running on port ${PORT}`);
});
